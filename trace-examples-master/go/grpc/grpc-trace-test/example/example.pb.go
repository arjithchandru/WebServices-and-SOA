// Code generated by protoc-gen-go. DO NOT EDIT.
// source: example.proto

/*
Package example is a generated protocol buffer package.

It is generated from these files:
	example.proto

It has these top-level messages:
	Message
*/
package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Example service

type ExampleClient interface {
	Echo(ctx context.Context, opts ...grpc.CallOption) (Example_EchoClient, error)
}

type exampleClient struct {
	cc *grpc.ClientConn
}

func NewExampleClient(cc *grpc.ClientConn) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) Echo(ctx context.Context, opts ...grpc.CallOption) (Example_EchoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Example_serviceDesc.Streams[0], c.cc, "/Example/Echo", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleEchoClient{stream}
	return x, nil
}

type Example_EchoClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type exampleEchoClient struct {
	grpc.ClientStream
}

func (x *exampleEchoClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleEchoClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Example service

type ExampleServer interface {
	Echo(Example_EchoServer) error
}

func RegisterExampleServer(s *grpc.Server, srv ExampleServer) {
	s.RegisterService(&_Example_serviceDesc, srv)
}

func _Example_Echo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).Echo(&exampleEchoServer{stream})
}

type Example_EchoServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type exampleEchoServer struct {
	grpc.ServerStream
}

func (x *exampleEchoServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleEchoServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Example_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Example",
	HandlerType: (*ExampleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Echo",
			Handler:       _Example_Echo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "example.proto",
}

func init() { proto.RegisterFile("example.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 101 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xad, 0x48, 0xcc,
	0x2d, 0xc8, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe5, 0x62, 0xf7, 0x4d, 0x2d,
	0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x8d, 0xb4, 0xb9, 0xd8, 0x5d, 0x21, 0xea, 0x85, 0x14, 0xb8, 0x58,
	0x5c, 0x93, 0x33, 0xf2, 0x85, 0x38, 0xf4, 0xa0, 0x1a, 0xa4, 0xe0, 0x2c, 0x25, 0x06, 0x0d, 0x46,
	0x03, 0xc6, 0x24, 0x36, 0xb0, 0x91, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc0, 0xf4, 0x28,
	0x57, 0x63, 0x00, 0x00, 0x00,
}
